- Treating the Bit Representation as an Integer
Java relies on 32-bit hash codes, so for base types byte,
short, int, and char, we can achieve a good hash code simply by casting a value
to int. Likewise, for a variable x of base type float, we can convert x to an integer
using a call to Float.floatToIntBits(x), and then use this integer as x’s hash code.
For a type whose bit representation is longer than a desired hash code (such as
Java’s long and double types), the above scheme is not immediately applicable.
One possibility is to use only the high-order 32 bits (or the low-order 32 bits). This
hash code, of course, ignores half of the information present in the original key,
and if many of the keys in our map only differ in these bits, then they will collide
using this simple hash code.

- Polynomial Hash Codes
The summation and exclusive-or hash codes, described above, are not good choices
for character strings or other variable-length objects that can be viewed as tuples of
the form (x0,x1, . . . ,xn−1), where the order of the xi’s is significant. For example,
consider a 16-bit hash code for a character string s that sums the Unicode values
of the characters in s. This hash code unfortunately produces lots of unwanted
collisions for common groups of strings. In particular, "temp01" and "temp10"
collide using this function, as do "stop", "tops", "pots", and "spot". A better
hash code should somehow take into consideration the positions of the xi’s.

- Cyclic-Shift Hash Codes
A variant of the polynomial hash code replaces multiplication by a with a cyclic
shift of a partial sum by a certain number of bits. For example, a 5-bit cyclic shift
of the 32-bit value 00111101100101101010100010101000 is achieved by taking
the leftmost five bits and placing those on the rightmost side of the representation,
resulting in 10110010110101010001010100000111. While this operation has little
natural meaning in terms of arithmetic, it accomplishes the goal of varying the bits
of the calculation. In Java, a cyclic shift of bits can be accomplished through careful
use of the bitwise shift operators.