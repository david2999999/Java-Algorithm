Question
    Cache: Imagine a web server for a simplified search engine. This system has 100 machines to
    respond to search queries, which may then call out using processSearch(string query)
    to another cluster of machines to actually get the result. The machine which responds to a given
    query is chosen at random, so you cannot guarantee that the same machine will always respond to
    the same request The method processSearch is very expensive. Design a caching mechanism
    to cache the results of the most recent queries. Be sure to explain how you would update the cache
    when data changes.

Thoughts before coding
    - What features do we want with this cache?
    - Let's first design a cache for 1 system
        - We need a data structure that
            - Allows us to quickly remove old data
                - We can use a LinkedList where nodes are connected via pointers
                    - We can easily disconnect nodes in O(1) runtime
                    - But there will be memory overhead because we are keeping pointers to keep track of our next and previous node
                - Why can't we use an ArrayList?
                    - If we remove an element, elements may need to be shifted to the left to fill in the spot
                    - This can be very inefficient O(n)
            - Efficiently move elements to the front when accessed
                - We will want to easily disconnect nodes and place them to the front, we can use a LinkedList
            - Quick access to a value based on a key
                - We can easily look up a value based on a key using HashMap
        - We can create a new data structure that has both LinkedList and HashMap
