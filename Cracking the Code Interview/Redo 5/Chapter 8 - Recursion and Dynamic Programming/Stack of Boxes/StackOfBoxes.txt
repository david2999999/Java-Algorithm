Question
    You have a stack of n boxes, with widths w1 , heights h i, and depths di . The boxes
    cannot be rotated and can only be stacked on top of one another if each box in the stack is strictly
    larger than the box above it in width, height, and depth. Implement a method to compute the
    height of the tallest possible stack. The height of a stack is the sum of the heights of each box.

Thoughts Before Coding
    - For the problem, imagine that be have boxes b1, b2, b3, we will need to find the maximum height of
        - if b1 is the bottom box
        - if b2 is the bottom box
        - if b3 is the bottom box
    - So, after placing our bottom box, how do we find the maximum height for our boxes above it?
        - Same process
            - if we put b1 at the bottom box, we will need to test
                - if b2 is our 2nd box
                - if b3 is our 2nd box
            - if we put b2 at the bottom box, we will need to test
                - if b1 is our 2nd box
                - if b3 is our 2nd box
            - if we put b3 at the bottom box, we will need to test
                - if b2 is our 2nd box
                - if b1 is our 2nd box
    - Since, we will only be experimenting with valid boxes, we do not want to try a bigger box on top of a smaller box
        - we can first sort the boxes in descending order in terms of height
        - So, we know we do not need to search backwards on the list, because all of the elements before our current index
          will have a greater or equal height.

Answer
    1) Our first solution will use recursion to find the maximum possible height with different boxes as base
        - We will first sort our boxes to make sure as we traverse the list, we do not need to search backwards to find a valid box to put
        - In our main method we will keep track of the maximum height using each of the individual boxes as the base or our bottom of all the boxes.
            - Then for the maximum height right above the base will be a recursive call to try out all of the other boxes that are smaller than our current box.
                - If the next box can be put on top of our current box, we will place this box on top of our current box and continue our recursion
                - After finding the maximum height for each level,
                    - we can add our current box height to the maximum height
                    - we can return the maximum height
            - The base of our recursive call is when we reach the last box to put on top of our stack of boxes
        - return the maximum height possible
    2) Our first solution has overlapping recursions
        - For example if we find try to find the maximum height of {3, 4, ....}
            - We will try to find the maximum height that starts with 4 {4, ....} when we trying using 4 as our bottom box, even though we have already calculated that from our previous recursion
        - One of the ways to prevent overlapping recursions is using memoization
        - We can use an array that is the same size as the number of boxes
            - the index will reflect the box inside our list of boxes
            - the value will be the maximum height with this box as the bottom
