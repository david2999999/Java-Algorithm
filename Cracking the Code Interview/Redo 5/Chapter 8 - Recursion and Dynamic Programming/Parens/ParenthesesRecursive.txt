Gotchas
    - The runtime complexity of the recursive method is O(n * Cat(n)), where Cat is Catalan number, and n is the number of parentheses we have.
        In the recursive method, we have to find a combination with a total length of 2 * n parentheses (there are n left parentheses and n right parentheses).
        And at each iteration, we have to find if adding a left parentheses works or adding a right parentheses work.
        We have a conditional value at the top of our recursive method to break out of the loop if the combination is invalid.
        The number of possible combination for
            1 pair of parentheses = 1 - ()
            2 pair of parentheses = 2 - ()(), (())
            3 pair of parentheses = 5 - ()(), (())(()), ()()(), ()(()), (())()

        This is very similar to the Catalan number where the numbers goes from 1, 1, 2, 5, 14, 42.
        For each of the catalan number, a string of size of n is created. So the runtime is O(2*Cat(n))
    - The space complexity of our recursive function is our recursion stack, we recursive all of the way until we have finish using the same number of
        right and left parentheses. So, there are 2 * n parentheses (n for left parentheses, and n for right parentheses).
        Total space = O(2n) = O(n)
