Question
    Sorted Search, No Size: You are given an array-like data structure Listy which lacks a size
    method. It does, however, have an elementAt (i) method that returns the element at index i in
    0(1) time. If i is beyond the bounds of the data structure, it returns -1. (For this reason, the data
    structure only supports positive integers.) Given a Listy which contains sorted, positive integers,
    find the index at which an element x occurs. If x occurs multiple times, you may return any index.

Thoughts before Coding
    - We have a sorted list and we are trying to find an element
        - This sounds awfully like binary search
    - What parameters do we need for binary search?
        - We need our lower index, which can start at 0
        - We need our upper index, which normally starts at the (size - 1) of our list
            - But we do not know the size of our list
            - How can we find the size of the list with the information given?
                - We know that we have past the end of our list if we ever get elementAt(i) equals to -1
                - Should we iterate through one step at a time to get our length of list?
                    - This will produce O(n), runtime, which makes our binary search useless
                    - Instead of searching one at a time, is there a quicker way?