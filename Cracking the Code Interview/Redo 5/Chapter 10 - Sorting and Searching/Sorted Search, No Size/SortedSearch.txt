Question
    Sorted Search, No Size: You are given an array-like data structure Listy which lacks a size
    method. It does, however, have an elementAt (i) method that returns the element at index i in
    0(1) time. If i is beyond the bounds of the data structure, it returns -1. (For this reason, the data
    structure only supports positive integers.) Given a Listy which contains sorted, positive integers,
    find the index at which an element x occurs. If x occurs multiple times, you may return any index.

Thoughts before Coding
    - We have a sorted list and we are trying to find an element
        - This sounds awfully like binary search
    - What parameters do we need for binary search?
        - We need our lower index, which can start at 0
        - We need our upper index, which normally starts at the (size - 1) of our list
            - But we do not know the size of our list
            - How can we find the size of the list with the information given?
                - We know that we have past the end of our list if we ever get elementAt(i) equals to -1
                - Should we iterate through one step at a time to get our length of list?
                    - This will produce O(n), runtime, which makes our binary search useless
                    - Instead of searching one at a time, is there a quicker way?

Solution
    - Instead of searching for our right index 1 step at a time
        - We can do it in multiples of 2 (1, 2, 4, 8, ..), this will help to achieve our O(logn) runtime
            - What is the terminating condition when looking for our right index?
                - We have found our right index
                    - if our elementAt(i) equals to -1
                    - or if the element at our current index is greater than our target
                        - This is because if our current value is greater than our target,
                          our target must be on the left side, we do not need to find an even higher index
        - After we find our right index, what should our left index be?
            - Our left index can start with rightIndex/2, this is because we made sure our rightIndex/2 is smaller than our target element
            - Which means our element must be in the range of values between the indices rightIndex/2 -> rightIndex
    - Now, we have our left and right index to start our binary search
        - What conditions do we need to know?
        - What if the value in our middle element equals our target value
            - We will return our mid index
        - What if our middle element is -1?
            - We have gone too far to the right, we have to search the left. (right = mid - 1)
        - What if our middle element is greater than our value
            - We will also search to the left. (right = mid - 1)
        - What if our middle element is less than our value?
            - We will search to the right. (left = mid + 1)
        - Our condition will end if our left goes beyond our right
            - We have failed to find the target element, return -1