Question
    Given a sorted array of strings that is interspersed with empty strings, write a
    method to find the location of a given string.

Thoughts before Coding
    - We have an sorted array of elements, and we need to find a value
        - This sounds like a question that needs a modified binary search
    - How do we handle cases if our middle elements hits an empty String?
        - We can search to our left/right to find our closest non empty string,
          before performing our binary search

Side Cases to Consider
    - What if our input array is null?
        - return -1
    - What if our input string is null?
        - return -1
    - Wat if our input string is empty?
        - return -1, or should we return any index that has an empty string?
Answer
    - In each of the recursive binary search call
        - If our low index is greater than our right index, we have failed to find our target value
            - return -1;
        - We should first check if our middle value is an empty string
            - If our middle value is empty string
                - we will need to find our closest left (mid - 1) or right (mid + 1) index which contains a non empty value
                - if our left index goes past our lower bound and our right index goes past our upper bound, return -1
                - if our left index has a non empty value, use this as mid index
                - if our right index has a non empty value, use this as mid index
                - increment our right index
                - decrement our left index
        - After we have found a non-empty value at our mid index, we can perform our binary search
            - If our mid value is greater than our target value, we have to recurse to the left (high = mid - 1)
            - If our mid value is lower than our target value, we have to recurse to the right (low = mid + 1)
            - If our mid value equals our target, return our mid index

    - What is the time and space complexity of the recursive approach?
        - Time complexity
            - Avg Case = O(logn) - Where we do not have many empty string in our array
            - Worst Case = O(n) - Where there are many empty strings in our array, and we ended up searching multiple indices for our middle element
        - Space complexity
            - O(logn) - our recursive stack