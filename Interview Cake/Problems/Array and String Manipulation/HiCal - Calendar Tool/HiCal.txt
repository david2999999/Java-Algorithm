Question
    Your company built an in-house calendar tool called HiCal. You want to add a feature to see the times in a day when everyone is available.
    To do this, youâ€™ll need to know when any team is having a meeting. In HiCal, a meeting is stored as an object of a Meeting class with
    integer variables startTime and endTime. These integers represent the number of 30-minute blocks past 9:00am.

Thoughts Before Coding
    - How do we merge two meetings?
        - We have to compare the end time of our first meeting with the start time of our second meeting
            - If the end time of our first meeting is equal or greater than the the start time of our second meeting, we can merge the two meetings together
        - After the merge
            - The starting time of the merge is the starting time of our first meeting
            - The ending time is the greater of the two ending time
    - One of the way to solve this question is to compare each meeting with all the other meetings. This will result in a runtime of O(n^2)
    - Is there a better way to compare them linearly?
        - Yes, if we sort the meetings by the start time of each meeting (ascending order).
        - We can iteratively compare them with each element with its neighbor instead
        - This will result in a runtime of O(nlogn) for sorting and then O(n) for comparing each element with its neighbor

Answer
    - First, we have to sort the array of meeting by their start meeting time
        - Create a comparator that can sort our array in ascending order based on the start meeting time
    - Declare our results list to hold all of the meeting time
    - Add the first meeting in the sorted list to our results, this is our starting merged meeting
    - Iterate through the sorted list with a 'for' loop
        - Check if our latest merged meeting can be merged with the current meeting
        - if the meetings can be merged, merge the meetings
            - The start time of the merged meeting is the start time of our latest merged meeting
            - The end time of the merged meeting is the larger of the two end times of our last meeting and our current meeting.
        - Else, add the new meeting (we can't merge this meeting) into our results
    - return the result list of merged meetings

Gotcha
    - If we are trying to compare each element with all the other elements, can we try sorting first?
        - This can lower our runtime from O(n^2) to O(nlogn) if possible.