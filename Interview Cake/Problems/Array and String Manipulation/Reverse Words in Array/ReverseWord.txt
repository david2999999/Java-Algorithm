Question
    Write a method reverseWords() that takes a message as an array of characters and reverses the order of the words in place.

Thoughts Before Coding
    - Since, we are reversing the words in place, we will be able to achieve O(1) space complexity
    - Can we do try reverse the string, by swapping words at the front and words at the back?
        - How do we figure out where words start/end?
        - Once, we know the indices of the two words, how do we swap them?
        - What if the words that we are swapping have different lengths?
            - This will result in the whole array being shifted
        - The runtime complexity of this method will be O(n^2), where we have as many words as characters
          and every single swap requires us to shift the whole array (the length of the swap words are different).
        - Can we do better?

Answer
    - Can we start with something simpler and just reverse all our characters first?
    - What do we notice after reversing all of the characters?
        - We notice that each of the individual words are reversed
        - We just need to reverse each individual word!
    - So, how do we reverse each individual word?
        - For each of the words, we need to find the starting and ending index
        - Our starting index can start with index 0
        - Our ending index is whenever we hit a space
        - Don't forget to account for the last word in the array, where there are no space after the last word
    - Our solution involves reversing all of the individual characters first then reversing each individual word
    - What is the space/time complexity of this solution?
        - time complexity = O(n) + O(n) = O(2 * n) = O(n)
            - O(n) to reverse every all of the characters in the array first
            - O(n) to reverse each individual word
        - space complexity = O(1) - since we are reversing all the words in place

Gotchas
    - When reversing each individual words in the array, don't forget about the word right before array.length.
        - This is the one position that does not have a space after the word
    - We also may need to account for spaces in front of the first word in the array and spaces at the end of our last word
        - But, in this example, we assume there are no spaces before and after the sentence