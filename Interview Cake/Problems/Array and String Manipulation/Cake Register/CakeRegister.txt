Question
    I have two registers: one for take-out orders, and the other for the other folks eating inside the cafe.
    All the customer orders get combined into one list for the kitchen, where they should be handled first-come, first-served.

    - The take-out orders as they were entered into the system and given to the kitchen. (takeOutOrders)
    - The dine-in orders as they were entered into the system and given to the kitchen. (dineInOrders)
    - Each customer order (from either register) as it was finished by the kitchen. (servedOrders)

    Given all three arrays, write a method to check that my service is first-come, first-served. All food should come out in the same order customers requested it.

Thoughts before Coding
    - What are the different ways to approach this problem?
    - We can first start small and see what can we build from there
    - What if our servedOrders only has 1 order?
        - Where do we compare this first order to check if is valid?
        - We can look at the first order in either takeOurOrders or dineInOrders and check if it is present in the front of either array
        - If it is present in front of either array, then we know its a valid first come, first served order
        - What if the order is not present in either front of the takeOurOrders or dineInOrders?
            - This means it is not first-come and first-served, we will return false.
    - What if our servedOrder has 2 orders?
        - After validating that our first order is present in the front of either array
            - We now need to check if our 2nd order is in the front of either 2 arrays
            - What should we do for the 1st order that is already accounted for?
                - We can remove this order from the servedOrder and inside one of the other array that we have found the order in,
                  because we know this order is valid and we can move onto to check the next one.
            - Now, we will check if our 2nd element inside our servedOrder is present in front of either 2 arrays again
    - If we continue to look for more orders and removing orders that we have already accounted, after our servedOrders is depleted,
      we will know that it is a valid first-come, first-served.