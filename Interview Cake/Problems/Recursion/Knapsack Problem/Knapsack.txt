Question
    You are a renowned thief who has recently switched from stealing precious metals to
    stealing cakes because of the insane profit margins. You end up hitting the jackpot,
    breaking into the world's largest privately owned stock of cakesâ€”the vault of the Queen of England.

    While Queen Elizabeth has a limited number of types of cake, she has an unlimited supply of each type.

    Write a method maxDuffelBagValue() that takes an array of cake type objects and a weight capacity,
    and returns the maximum monetary value the duffel bag can hold.

Thoughts before coding
    - What are some methods we can attempt to use?
        1) Can we just look at the cake with the highest value?
            - No, we have to also factor in the weight
            - Some weight may be small but has more value than others
        2) What if we look at the value/weight ratio?
            - A problem may arise where we not using the full capacity that we can carry, as a result
              our value may not be the highest value we can actually hold.

Answer
    - Lets start thinking small, how do we calculate the maximum value duffel bag with a weight of capacity 1 kg?
        - If the capacity is 1kg, we will only care about the cakes that weight 1kg with the highest value
        - We can use the greedy approach to keep track of the max value that we have seen so far
    - After finding the maximum value for 1kg, what if we have a capacity of 2kg?
        - Using the same approach,
            1) If the cake weighs 2kg, then it would fill up our whole capacity. So, we just need to make sure
               this value is greater than our current max value at capacity 2.
            2) If the cake weighs 1kg, we can take 1kg, but we still have 1kg capacity left.
                - What is the best way to fill that capacity?
                    - We have calculated the maximum value of 1 kg from before!
                    - We will check if add the cake's value to the max value at capacity 1 is better than our current
                      maximum capacity at 2 kg.
    - Does this approach work for all kg? Let's try doing 3 kg
        - We have the maximum values for 2kg and 1kg
            1) If the cake weighs 3kg, then we just check if the cake's value is greater than our maximum value at capacity 3
            2) If the cake weighs 2kg, then we can carry 1 more kg, and we know the maximum value of 1kg from before.
               We just need to add our cake value with our maximum cake value at 1kg, and then compare it with our current
               maximum capacity of 3.
            3) If the cake weighs 1kg, then we can carry 2 more kg, and we know the maximum value of 2kg from before.
               We just need to add our cake value at 2kg, and then compare it with our current maximum value at 3kg.
    - What is the time and space complexity of this solution?
        - time complexity = O(n * k), where n is number of types of cake and k is the capacity of the duffel bag,
          this is because we loop through cake (n cakes) for every capacity (k capacities).
        - Space complexity = O(k), because we are creating an array to keep track of the previous maximum values with specific weight

Edge Cases to Consider
    - What is our duffel bag weight capacity is 0?
        - We will still need to check if there are any cakes with weigh 0.
    - What is any of the cakes weigh 0 kg?
        - If we have a cake that weighs 0kg and has a positive value, it is reasonable to return infinity, even if our capacity is 0.
            - For returning infinity, we have the highest possible Long.MAX_VALUE
            - Raise an exception indicating the answer is infinity
        - Our second approach of telling the user it is infinity is more suitable because Long.MAX_VALUE is still a specific number
          and the specific number is "lossy", it won't be clear if we are talking about an actual number of special case infinity




