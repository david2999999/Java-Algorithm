Question
    Write a recursive method for generating all permutations of an input string. Return them as a set.
    Don't worry about time or space complexity—if we wanted efficiency we'd write an iterative version.
    To start, assume every character in the input string is unique.
    Your method can have loops—it just needs to also be recursive.

Thoughts Before Coding
    - So, how do we create a permutation of a string?
        - Lets start with a base case and continue from there
            - We can first start with 1 character (a)
                - permutation of a = a
            - What is the permutation of (ab) ?
                - permutation of ab = ba, ab
        - We find out that finding the permutations of the a string with length k requires first finding the permutation of length k - 1.
        - Then for each of the permutation that we found in permutation(k - 1), we can insert the character that we just excluded into every single index
          to create a new permutation.
            - Permutation of cat
                - t
                - at ta
                - cat act atc cta tca tac

Answer
    - We can use a recursive function to first build permutations of length (n - 1)
        - Base case is when the length of string is 1, then the permutation of 1 character is itself.
    - Then we can build new permutation using the permutations that we have found in permutation(n - 1)
        - This can be done by inserting our excluded character into every single index of the permutation that we found before
    - The base case of the recursion is when the length of our string becomes 1. This means there is only 1 character left and the permutation of 1 character
      is itself.
    - For each of the recursive call
        - We will first find the permutations on all character except for the last character. This can be done with permutation(0, string.length() - 1)
        - We then declare a variable to have a value of our last excluded character. (str.charAt(str.length() - 1)
        - We iterate through permutations from our previous call (permutation(0, string.length() - 1)).
            - For each of the permutation string
                - We are going to insert the excluded last character into every single index of the permutation string, this will create a new permutation
                  from the previously found permutations.
                - For example, if we have previous permutation of (at, ta) and our excluded character is 'c'
                    - For the first permutation in our set
                        - We can insert c at the beginning, middle, and end to create (cat, act, atc)
                    - For the second permutation in our set
                        - We can insert c at the beginning, middle, and end to create (cta, tca, tac)
        - return the new list of permutations

Gotcha
    - For insertion of character into every index
        - We can use a for loop, and this for loop iterates from [0, str.length()]
        - We should note that the for loop includes the length of the string, this means we would like to insert a character to the index
          right after the end of the string. (character index starts with 0, last character is at str.length() - 1). Inserting a new character
          to the end of the string is at index str.length().
            - Note: str.substring(str.length()) - does not cause index out of bound exception, even though there is no character there,
              it will just return an empty string. But, str.substring(str.length() + 1) will cause index out of bound exception.

        - To get the start of the string, we can use str.substring(0, index) - characters from 0 to index exclusive
        - To get the end of the string, we can use str.substring(index) - characters from index and beyond
        - To generate the new inserted string, we can do (start + char + end) - insert the excluded character into every index.





