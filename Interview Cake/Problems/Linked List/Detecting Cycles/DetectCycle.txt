Question
    You have a singly-linked list and want to check if it contains a cycle.

    A singly-linked list is built with nodes, where each node has:
        - node.next — the next node in the list.
        - node.value — the data held in the node. For example, if our linked list stores people in line at the movies, node.value might be the person's name.

Thoughts Before Coding
    - A cycle means when we traverse our linkedlist, we will eventually get back to one of the previous nodes that we have already visited
    - Can we store all of the previous elements inside a HashSet
        - Then when as we traverse the list, we can check if our current node is inside our HashSet
            - If our node is in the HashSet, we have found a cycle, return true
            - Else, add our current node inside the HashSet
        - What is the terminating condition if there is no cycle?
            - Our pointer will eventually become null, ending our while loop
    - What is the time and space complexity?
        - Time complexity = O(n)
            - We will iterate through our linkedlist once, either detecting our cycle or goes to the end of our linked list
        - Space complexity = O(n)
        - HashSet to keep track of previous elements
    - Can we we reduce our space complexity to O(1)?

Answer
    - For this question, we can use the tortoise and the hare technique
        - Where will have a slow and fast pointer
    - Our fast pointer will move forward 2 steps at a time
    - Our slow pointer will move forward 1 step at a time
    - If our slow pointer ever catches up to our fast pointer, then we know we have a cycle
        - Will our fast pointer ever skip past our slow pointer if there is a cycle?
            - No, because if a fast pointer skips over a slow pointer by 1 step
                - Then in the previous step, where our fast pointer moves back 2 steps,
                  and our slow pointer moves back 1 step, they will meet.
    - How do we know if there is no cycle?
        - Our fast or the fast.next pointer will be null, signaling the end of the list

    - What is the time and space complexity?
        - Time complexity O(n)
            - We either hit the end of the list or detect a cycle
        - Space complexity O(1)