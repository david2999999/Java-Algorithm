Question
    You want to build a word cloud, an infographic where the size of a word corresponds to how often it appears in the body of text.

Thoughts before Coding
    - We need to find words from a string and keep a counter for each unique word
        - How do we know if we have found a word?
            - We can iterate through the string and check if our current element is a letter (Character.isLetter(c))
            - We can have a starting index of a word and have a counter for the length of the word
            - Then we can use a substring method to create the word
                - Make sure to NOT use concatenation on the word (a new string is created for each concatenation, can cause O(n^2) runtime)
    - Is there any side cases we need to consider?
        - What about for capitalized words?
        - How do we separate words?
            - Is it by space?
            - Is it by punctuation?
            - Are we accounting for the last word in our string?
        - Do we need to account for special unicode characters?

Solution
    - We will create a class to tie our methods together
        - The constructor will receive the our sentence as a parameter
        - We will construct our HashMap with that parameter
    - We will create our own split words method instead of the built it in one.
        - This allows us to add words to our Map in one iteration
        - Also, allows us to eliminate punctuations
        - So, how do we split words?
            - We will split words by spaces, em dashes, and ellipses
            - We need to make sure to include hyphens and apostrophes to signify a single word
        - As we find the words, we add them to our map
    - What is the time and space complexity of this solution?
        - time complexity = O(n) - We are only iterating the string 1 time with n characters
        - space complexity = O(n) - We created the HashMap to store the count of our words