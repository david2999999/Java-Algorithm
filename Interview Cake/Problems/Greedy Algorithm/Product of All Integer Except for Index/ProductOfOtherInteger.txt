Question
    You have an array of integers, and for each index you want to find the product of every integer except the integer at that index.
    Write a method getProductsOfAllIntsExceptAtIndex() that takes an array of integers and returns an array of the products.
    Here's the catch: You can't use division in your solution!

Thoughts before coding
    - At each of the index, we have to multiple all of the numbers before it and all of the numbers after it
    - If we have the input array
                                        [1, 2, 6, 5, 9]
        - Our multiplication will look like this
            [2 * 6 * 5 * 9,  1 * 6 * 5 * 9,  1 * 2 * 5 * 9,  1 * 2 * 6 * 9,  1 * 2 * 6 * 5]

    - There seem to be overlapping multiplications for each other indices
        - Can we prevent this overlapping multiplication by storing it?
    - If look at our number 5, our multiplication is [1 * 2 * 6 * 9]
        - This multiplication shows the multiplication of (product of all numbers before 5) * (product of all numbers after 5)
        - We can create two array to store all of the
            - product of all numbers before an index
            - product of all numbers after an index
        - Then our solution will be the product of value before/after index
    - How do we get the product of all numbers before an index?
        - Lets start with the array [1, 2, 6, 5, 9]
            - At index 0, there is no product before it, so we can use 1 as the product
            - At index 1, the product is 1 * 1
            - At index 2, the product is 1 * 1 * 2
            - At index 3, the product is 1 * 1 * 2 * 6
            - At index 4, the product is 1 * 1 * 2 * 6 * 5
            - At each index, we can greedily store the product of the indices before it
            - We can loop from the front of the array to create this array productOfValuesBeforeIndex
    - How do we get the product of all numbers after an index?
        - Lets start with the array [1, 2, 6, 5, 9]
            - At index 4, there is no product after it, so we can use 1 as the product
            - At index 3, the product is             9 * 1
            - At index 2, the product is         5 * 9 * 1
            - At index 1, the product is     6 * 5 * 9 * 1
            - At index 0, the product is 2 * 6 * 5 * 9 * 1
            - We can loop from the back of the array to create this array productOfValuesAfterIndex
    - Then our solution will be the product of each index
        - productOfValuesBeforeIndex[i] * productOfValuesAfterIndex[i]
