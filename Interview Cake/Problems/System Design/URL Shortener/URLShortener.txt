Question
    Design a URL shortener
        You know, like bit.ly.
        Let's call it ca.ke!

Scope the Project
    - System questions are intentionally left open end, so we have to ask questions and make some decisions
      about what exactly you are building to get on the same page as your interviewer.

Features
    - Is this full web application with an user interface, or just an API that allows users to perform HTTP calls?
        - We will build an API to start
    - Since, this is an API, do we need authentication or user accounts or developer API key?
        - No, lets just make it open to start
    - Can people modify or delete links?
        - We will leave that out for now
    - If people can't delete links, do they persist forever? or do we automatically filter old ones?
        - What policies can we use for removing old ones?
            1) We could remove links that are created some time ago, like 6 months
            2) We could remove links that has not been visited for quiet some time, like 6 months
        - Our 2nd choice seems to be less frustrating the our first choice
            - But, what if the link is on the private, an internal resource link for company or universities?
            - What if someone has these URLs on a pamphlet, did not give out any pamphlets for a few months,
              then started giving them out again?
                - This seems reasonable thing that might happen, if the link suddenly stopped working, it
                  will be quite frustrating for users.
            - What is a book has shortlinks printed on them in a million copies?
        - We will decide to let links exist forever.
    - Should we allow users to customize their shortlinks or do we auto-generate?
        - Our users may want to append custom descriptions to our shortened URL.
    - Do we need analytics, so we can know how many clicked on a link?
        - Good idea, but let's leave it out to start

Design Goals
    - Some design goals have higher priority than others, so we need to think about the order of goals
        - We should be able to store a lot of links, since the links does not have expiration
        - Our shortlinks should be as short as possible. Having shorter links that our competitors could be a business advantage
        - Following a shortlink should be fast
        - Shortlinks should be resilient to load spikes, such as being on a reddit post

Data Model
    - Be careful how you name things, this will help communicate clearly and it'll show that we care
      about using descriptive and consistent names
    - Let's call our main entity a 'Link', which is a mapping between a shortlink on our site, and a longLink,
      where we redirect people when they visit the short link
            - Link
                - shortLink
                - longLink
    - The shortLink could be one that are server randomly generate or one that the user chooses
    - We actually do not need to store the whole ShortLink (ca.ke/mysite), we just need to store
      the "slug", which the part at the end (mysite)
    - Let's rename our shortlink field
            - Link
                - slug
                - longLink
    - Our longLink does not make sense without the shortLink, so we will rename it to destination
            - Link
                - slug
                - destination
    - Now we can call this whole model/table ShortLink to be more specifc
            - ShortLink
                - slug
                - destination

Sketching the Code
    - Pseudocode is fine in this process, we want to create a naive sketch, so we can get on the same page
      and will have a starting point to optimize.
    - There may be tricky issues that needs to be thought through, jot down a note and come back to it later
    - This is basically a skeleton to start building things out from, think about what endpoints/views we will need
      and what each one will have to do.

Views/Pages/Endpoints
    - We are making an API, so let's make it REST-style.
        - Our endpoint for creating a ShortLink should be named after the entity we are creating
        - We can also version our APIs
        - Our way to create an endpoint becomes ca.ke/api/v1/shortlink
    - In order to create a new ShortLink, we'll send a POST request there.
        - Our POST request will include on required argument, the destination our ShortLink will point to.
        - It also takes in an optional slug argument
            - if the slug is not provided, we will auto generate one
    - In Rest style, we should allow GET, PUT, PATCH, and DELETE, which can be used to read, modify and delete links.
        - Since we are not making that a requirement for now
            - We can return an error 501

    - We currently do not have exact implementation on how to create a slug
        - What character can we use in randomly generated slug?
        - What characters are allowed in URLs?
        - How we do ensure a randomly generate slug hasn't already been used?
        - If there is an collision, how do we handle it?

    - Now, we need to handle how should we redirect the user after a link?
        - Our shortened URLs should be as short as possible
            - We gave them this format ca.ke/$slug
        - One potential challenge when creating web app for our service is
            - we may need to differentiate our own pages from shortlinks
                - example 'ca.ke/about'
            - Our backend needs to know "about" is not a shortlink slug
        - We might want to reserve or block shortlinks for pages we need
        - Or we can add a prefix to our URL. (ex. ca.ke/w/about)

Slug Generation
    - We should check the design goals, and design around those goals
    - The first 2 design goals that pops up are
        - We should be able to store a lot of links
        - Our shortlinks should be as short as possible
    - We notice that the more characters we allow in our shortlinks, the more different
      shortlinks we can have without making shortlinks longer.
        - if we allow c different character, for n character long slug, we will have c^n distinct possibilities
    - The road path for us becomes
        - Figure out the max set of characters we can allow in our random shortlinks
        - Figure out how many distinct shortlinks we want to accommodate
        - Figure our how long our shortlinks must be to accommodate must be to accommodate that many distinct possibilities

What Characters can we allow in our randomly generated slugs?
    1) We should only allow characters that are actually allows in URL
    2) We should probably pick characters that are relatively easy to type
        - Some people may want to type the shortlink while reading it off a paper
    - We may ask to search on stack overflow for the allowed characters that are in the URL
        - This will include "only alphanumerics, the special characters "$-_.+!*'(),"
        - And also reserved characters such as '?', which is used to mark the beginning of a query string
          and '#' where marks the beginning of a fragment/anchor
    - What about upper/lower case letters?
        - Domain names are not case sensitive
        - But the path portion of an url is path sensitive
        - Lowercase and Capital versions of the same letter can be treated as different characters in our slugs.
    - The usage of the apostrophe character seems a little iffy, since URLs can be surrounded by single quotes in html
    - In keeping with point (2), we should remove all special characters from our list
        - This removal of 8 characters can be a exchange for readability and typeability
        - What if the user wants to specify their own slug and wants special characters?
            - We will allow user customized slugs to have special characters
    - So currently we have a-z, A-Z, and 0-9, where we have 26 + 26 + 10 = 62 possible characters
        - We allow user generated slugs to have special characters, for a total of 72

How many distinct slugs do we need?
    - This is a good question to ask your interviewer, she may have the answer to this question
    - There is not right or wrong answer, the important thing is to have organized thinking

    - How many new slugs might we create on a busy day?
        - Maybe 100,000 per minute?
        - That is 145 million new links a day
        - 52.5 billion in a year
        - 5.2 trillion in 100 years
    - If we can accommodate that many slugs, we expect we'll be able to keep handing our random slugs effectively
























