Question
    Use the built-in Stack class to implement a new class MaxStack with a method getMax() that returns the largest element in the stack. getMax() should not remove the item.
    Your stacks will contain only integers.

Thoughts before Coding
    - What are the different ways to get the maximum number from a stack?
        - The brute force approach is to pop all elements our of the stack
            - get the maximum number
            - push all of the elements back into the stack
        - What is the time complexity?
            - Time complexity = O(n) + O(n)
                - O(n) - pop all elements out to check for our maximum value
                - O(n) - push all of our elements back into the stack after finding the max value
    - In order to achieve O(1) runtime, we need to keep track of our maximum value
        - And every time a new value is pushed into a stack
            - We need to make sure our maximum value is updated if the value is greater than our current max
        - What about every time a value is popped out of the stack?
            - We will need to walk through our stack again to look for our maximum value
            - This can incur O(n) runtime complexity
        - What we need is when updating to a new maximum value, we do not override previous max value
            - We need to save this previous value, so when we remove our current max, we will still have access to our previous max
        - What data structure can we used to keep track of our max?
            - We can use another stack!

Solution
    - We will have 2 stacks
        - One stack will store our elements
        - Another stack will only store our max values
    - When pushing elements into our stack, we also need to check
        - If the value of this element is greater than or equal to our maximum element on top of our max stack
            - We will need to push a new maximum on our max stack
        - If our max stack is empty, we can just put our element into the max stack as our current maximum value
    - When popping elements off our stack, we also need to check
        - If the value is equal to our maximum element on top of our max stack
            - If the two values are equal, we will pop the element off our max stack
    - When we want to know what is the current max element
        - We just need to peek our max stack

    - What is the time for each of the methods?
        - Pop() - O(1)
        - Push() - O(1)
        - getMax() - O(1)
    - What is the space complexity?
        - O(m) additional space
            - where m is the number of operation on the list
            - Worst case, each additional operation adds a new maximum to our max stack











