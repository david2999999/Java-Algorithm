Question
    You're working with an intern that keeps coming to you with JavaScript code that won't run because the braces, brackets, and parentheses are off.
    To save you both some time, you decide to write a braces/brackets/parentheses validator.

    Let's say:
        '(', '{', '[' are called "openers."
        ')', '}', ']' are called "closers."

    Write an efficient method that tells us whether or not an input string's openers and closers are properly nested.

Thoughts before Coding
    - We need to think of a data structure to use
        - Lets see what do we need
            - What should we do when we see an opening bracket?
                - We want to save this opening bracket later to be matched with a closing bracket
            - What should we do when we see a closing bracket?
                - We need the last opening bracket to check if it matches with our closing bracket
        - So we need a data structure to
            - Quickly add a opening bracket
            - Quickly remove our most recent opening bracket if a closing bracket is found
        - We can use a Stack!

Answer
    - How do we know if a character is
        - Opening bracket?
        - Closing bracket?
    - How do we know if a opening bracket matches a closing bracket?
        - We can create a HashMap that matches our opening to our closing
            - Key -> Opening
            - Value -> Closing
        - We can then create a HashSet of opening brackets using our keys of our HashMap
        - We can then create a HashSet of closing brackets using the values of our HashMap
    - We now have the information to determine our opening/closing brackets
    - We now now instantiate a Stack to keep track of all our previous opening brackets
        - This can be done with Deque interface with the implementation ArrayDeque
    - We will iterate through our String
        - If the character is an opening bracket
            - Push it into our stack
        - If the character is a closing bracket
            - If our stack is empty
                - return false, there is no opening bracket to match
            - Pop our topmost element out of our stack
            - If our previous opening bracket does not match our current closing bracket
                - return false, invalid match
    - return true if our stack is empty, we have finished matching all opening brackets with closing brackets











